Функция printID() печатает реальный идентификатор пользователя (uid) и эффективный идентификатор пользователя (euid). (См. прим.3)
    getuid() возвращает реальный идентификатор пользователя, т.е. идентификатор пользователя, запустившего процесс.
    geteuid() возвращает эффективный идентификатор пользователя, который служит для определения прав доступа процесса к файлам. Также, 
      при создании файла, идентификатор владельца файла устанавливается равным euid процесса, создающего файл.

Функция openFile() открывает файл "myfile" для чтения и записи, если это возможно, и затем закрывает файл, возвращая код SUCCESS.
Возможные проблемы:
        1. Файл не будет открыт. Это возможно если файла не существует или у нашего процесса недостаточно прав для действий с файлом (см. Прим.1). 
		Код ошибки будет возвращен в функцию main(). (Не влияет на время завершения основной программы)
        2. Файл не закрыт. Код ошибки будет возвращен в функцию main для дальнейшей обработки. (Программа будет завершена досрочно)
        
В функции main() мы вызываем последовательно функции printID() и openFile(), в первый раз перед использованием системного вызова setuid()(см. прим.2), 
  второй раз после. В случае возникновения ошибок или проблем завершаем программу с соответсвующим кодом ошибки. Если в ходе выполнения программы проблем 
  не выявлено, программа завершается с кодом 0.


Дополнительные сведения.

    Примечание 1. В Unix каждому файлу соответствует набор прав доступа, представленный в виде 9-ти битов режима.
		Режимы доступа разбиты на группы по три, где первая группа отвечает за разрешения для владельца файла, вторая за разрешения группы, 
		  которой принадлежит файл, и третья за разрешения для остальных пользователей.
		Разрешения бывают 3-х видов: разрешение на чтение(r), на запись(w) и на исполнение (x).

    Примечание 2. Функция int setuid(uid_t uid) изменяет эффективный идентификатор вызывающего процесса, если аргумент функции uid совпадает с 
	реальным идентификатором пользователя.
    
    Примечание 3. Обычно реальный и эффективный идентификаторы процесса совпадают, но существует возможность дать процессу более широкие права, 
      чем права пользователя, его запустившего. 
    Это можно сделать с помощью установки suid-бита на файле. Этот бит позволяет назначить права доступа исходя из прав доступа владельца файла, 
      т.е. при запуске на выполнение файла с установленным suid-битом, эффективный идентификатор процесса будет изменен на идентификатор владельца 
      исполняемого файла.
    Процесс, запустивший программу с suid-битом будет иметь эффективный идентификатор, отличный от реального либо до конца времени выполнения программы, 
      либо до применения setuid(2).
